<div class="bg-map"></div>

<%= render :partial => 'orders/header' %>

<%= form_for @order do |f| %>

  <div class="navigation">
  </div>

  <div class="map">
    <div class="browser">
      <div id="zoom"></div>
      <div id="map"></div>
    </div>
    <div class="shadow bottom"></div>
  </div>

  <div id="container"></div>

  <section class="highlighted">
  <div class="inner">
    <div class="left">
      <h3 class="bottom-5"><%= t('.your_data.title') %></h3>
      <p class="bottom-20"><%= t('.your_data.description') %></p>

      <div class="input-field upload">
        <input type="text" />
        <div class="placeholder">
          <div class="icon"></div>
          <span><%= t('.your_data.drag_drop') %></span>
          <%= link_to t('.your_data.select_files'), '#' %>
        </div>
      </div>
    </div>
  </div>
  </section>

  <section class="comments">
  <div class="left">

    <div class="inner">
      <div class="field left">
        <label for="name"><%= t('.contact_info.name') %></label>
        <div class="input-field">
          <input type="text" value="" name="name" />
        </div>
      </div>


      <div class="field right">
        <label for="email"><%= t('.contact_info.email') %></label>
        <div class="input-field">
          <input type="text" value="" name="email" />
        </div>
      </div>

      <div class="field">
        <label for="comments"><%= t('.contact_info.comments') %></label>
        <div class="textarea">
          <textarea value="" name="comments"></textarea>
        </div>
      </div>
    </div>
  </div>

  </section>

  <section class="submit centered">
  <div class="inner">
    <%= f.submit t('.submit'), :class => "button blue" %>
  </div>
  </section>

<% end %>

<%= render :partial => 'home/footer' %>


<% content_for :js do %>

  <script type="text/javascript">
    $(function() {

      cdb.init();

      // Adds map
      var map = new cdb.geo.Map({
        center: [18.289374355860424, 59.765625],
        zoom: 2
      });

      var mapView = new cdb.geo.LeafletMapView({
        el: $('#map'),
        map: map
      });

      // Adds zoom
      var zoom = new cdb.geo.ui.Zoom({
        model: map,
        template: cdb.templates.getTemplate('templates/map/zoom'),
        el: $('#zoom')
      })

      zoom.render();


      // Adds Infowindow
      var infowindowModel = new cdb.geo.ui.InfowindowModel({ });

      var infowindow = new cdb.geo.ui.Infowindow({
        model: infowindowModel,
        template: cdb.templates.getTemplate('templates/map/infowindow'),
        mapView: mapView
      });

      $("#map").append(infowindow.$el);

      // Adds pane
      var pane = new cdb.ui.common.TabPane({
        el: $("#container")
      });

      window.pane = pane;

      var fields = {};

      fields.markers = new cdb.ui.common.Fields([
        { callback: null, className: null,        checked: false, title: "Density map",           name: "z",   type: false,      price: 2000, description: "Includes data process & visualization." },
        { callback: null, className: null,        checked: false, title: "Visualization method",  name: false, type: "title",    price: 0,    description: false },
        { callback: null, className: null,        checked: true,  title: "Rectangular grid",      name: "a",   type: 'radio',    price: 0,    description: "Group and represent data using an hexagonal grid" },
        { callback: null, className: null,        checked: false, title: "Hexagonal grid",        name: "a",   type: 'radio',    price: 0,    description: "Group and represent data using a rectangular grid" },
        { callback: null, className: null,        checked: false, title: "Circular grid",         name: "a",   type: 'radio',    price: 0,    description: "this is a description" },
        { callback: null, className: "separator", checked: false, title: "Variable selection",    name: "b",   type: 'checkbox', price: 100,  description: "This allows your users to toggle between different variables to visualize." },
        { callback: null, className: null,        checked: false, title: "Color selection",       name: "c",   type: 'checkbox', price: 200,  description: "This allows your users to toggle between different variables to visualize." }
      ]);

      fields.bubble = new cdb.ui.common.Fields([
        { callback: null, className: null,        checked: false, title: "Bubble",           name: "z",   type: false,      price: 2000, description: "Includes data process & visualization." },
        { callback: null, className: null,        checked: false, title: "",                   name: false, type: "title",    price: 0,    description: false },
        { callback: null, className: null,        checked: true,  title: "A. Rectangular grid",      name: "a",   type: 'radio',    price: 0,    description: "Group and represent data using an hexagonal grid" },
        { callback: null, className: "separator", checked: false, title: "A. Variable selection",    name: "b",   type: 'checkbox', price: 100,  description: "This allows your users to toggle between different variables to visualize." },
        { callback: null, className: null,        checked: false, title: "A. Color selection",       name: "c",   type: 'checkbox', price: 200,  description: "This allows your users to toggle between different variables to visualize." }
      ]);

      fields.thematic = new cdb.ui.common.Fields([
        { callback: null, className: null, checked: false, name: "type", type: false,      price: 2000, title: "Thematic", description: "Including base interactivity, mouse-over effect and basic infowindows." },
        { callback: null, className: null, checked: false, name: "type", type: 'checkbox', price: 350,  title: "Dynamic filters.", description: "This allows you to filter the polygons in your map dynamically." },
        { callback: null, className: null, checked: false, name: "type", type: 'checkbox', price: 350,  title: "Custom infowindows.", description: "This includes an ad-hoc design for your map infowindows. " },
        { callback: null, className: null, checked: false, name: "type", type: 'checkbox', price: 350,  title: "Different styles for different types of polygons.", description: "This allow you to visual differentiate the polygons- styles may change-." }
      ]);

      fields.polygons = new cdb.ui.common.Fields([
        { callback: null, className: null, checked: false, name: "type", type: false,      price: 2000, title: "Polygons", description: "Including base interactivity, mouse-over effect and basic infowindows." },
        { callback: null, className: null, checked: false, name: "type", type: 'checkbox', price: 350,  title: "Dynamic filters.", description: "This allows you to filter the polygons in your map dynamically." },
        { callback: null, className: null, checked: false, name: "type", type: 'checkbox', price: 350,  title: "Custom infowindows.", description: "This includes an ad-hoc design for your map infowindows. " },
        { callback: null, className: null, checked: false, name: "type", type: 'checkbox', price: 350,  title: "Different styles for different types of polygons.", description: "This allow you to visual differentiate the polygons- styles may change-." }
      ]);

      fields.unknown = new cdb.ui.common.Fields([
        { callback: null, className: null, checked: false, name: "type", type: false,      price: 0, title: "Custom consultancy", description: "Just send us your data and a brief idea of what you need to analyze, and we will give you the best option to represent it and the corresponding estimate." },
      ]);

      pane.addTab('markers',  new cdb.ui.common.Form({ map: map, className: 'markers',  collection: fields.markers  }));
      pane.addTab('polygons', new cdb.ui.common.Form({ map: map, className: 'polygons', collection: fields.polygons }));
      pane.addTab('bubble',   new cdb.ui.common.Form({ map: map, className: 'bubble',   collection: fields.bubble }));
      pane.addTab('thematic', new cdb.ui.common.Form({ map: map, className: 'thematic', collection: fields.thematic }));
      pane.addTab('unknown',  new cdb.ui.common.Form({ map: map, className: 'unknown',  collection: fields.unknown }));

      defaultPage = "markers";

      var earthquakesOptions = {
        user_name: 'examples',
        table_name: 'earthquakes',
        query: 'SELECT * FROM {{table_name}}',
        tile_style: "#{{table_name}}{marker-fill:red}",
        interactivity: "cartodb_id, latitude, longitude, magnitude",
        featureOver:  function() { document.body.style.cursor = "pointer"; },
        featureOut:   function() { document.body.style.cursor = "default"; },
        featureClick: function(ev, latlng, pos, data) { 
          var latlng = new L.LatLng(data.latitude, data.longitude);
          infowindow.setLatLng(latlng);
          infowindowModel.set("content", data);
          infowindow.showInfowindow();
        }
      };

      var baseLayerURL = 'http://{s}.tiles.mapbox.com/v3/cartodb.map-1nh578vv/{z}/{x}/{y}.png';
      var baseLayerURL2 = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png';

      var templates = new cdb.ui.common.NavigationItems([
        { cartoDBLayerOptions: earthquakesOptions, baseLayerURL: baseLayerURL, selected: true,  className: "markers",       name: "Markers map" },
        { cartoDBLayerOptions: null, baseLayerURL: baseLayerURL2, selected: false, className: "polygons",      name: "Polygons map" },
        { cartoDBLayerOptions: null, baseLayerURL: baseLayerURL2, selected: false, className: "bubble",        name: "Bubble map" },
        { cartoDBLayerOptions: null, baseLayerURL: baseLayerURL2, selected: false, className: "thematic",    name: "Thematic map" },
        { cartoDBLayerOptions: null, baseLayerURL: baseLayerURL2, selected: false, className: "unknown",       name: "Don't know" }
      ]);

      window.map = map;
      window.navigation  = new cdb.ui.common.Navigation({ collection: templates });
      window.router      = new cdb.Router();
      Backbone.history.start({ pushState: true });

      // $("#container").append(window.app.render());

    });
  </script>

<% end %>
